<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:dia="clr-namespace:WpfDevKit.UI.Dialogs"
    xmlns:conv="clr-namespace:WpfDevKit.UI.Converters">

    <!-- DIALOG WINDOW -->
    <DataTemplate DataType="{x:Type dia:DialogBase}" />

    <!--  BITMAPS  -->
    <BitmapImage x:Key="AlertImage"   UriSource="/Images/Alert.png" />
    <BitmapImage x:Key="DefaultImage" UriSource="/Images/Default.png" />
    <BitmapImage x:Key="ErrorImage"   UriSource="/Images/Error.png" />
    <BitmapImage x:Key="HelpImage"    UriSource="/Images/Help.png" />
    <BitmapImage x:Key="InfoImage"    UriSource="/Images/Info.png" />
    <BitmapImage x:Key="LogoImage"    UriSource="/Images/Logo.jpg" />
    <BitmapImage x:Key="OKImage"      UriSource="/Images/OK.png" />
    
    <!--  LOG CATEGORY TO COLOR MAP  -->
    <ResourceDictionary x:Key="LogCategoryBrushes">
        <SolidColorBrush x:Key="StartStop" Color="Blue" />
        <SolidColorBrush x:Key="Trace"     Color="Violet" />
        <SolidColorBrush x:Key="Debug"     Color="Green" />
        <SolidColorBrush x:Key="Info"      Color="Black" />
        <SolidColorBrush x:Key="Warning"   Color="Orange" />
        <SolidColorBrush x:Key="Error"     Color="Red" />
        <SolidColorBrush x:Key="Fatal"     Color="DarkRed" />
    </ResourceDictionary>

    <!--  CONVERTERS  -->
    <BooleanToVisibilityConverter     x:Key="BooleanToVisibility" />
    <FontWeightConverter              x:Key="StringToFontWeight" />
    <conv:StringToBrushConverter      x:Key="LogCategoryToBrush"  BrushMap="{StaticResource LogCategoryBrushes}" DefaultBrush="Black" />

    <!--  COLORS  -->
    <Color x:Key="Primary1"            >#002060</Color>
    <Color x:Key="Primary1Light"       >#8E94AE</Color>
    <Color x:Key="Primary1LightLight"  >#C7C9D6</Color>
    <Color x:Key="Primary2"            >#79A3DC</Color>
    <Color x:Key="Primary2Light"       >#BAD1ED</Color>
    <Color x:Key="Primary2LightLight"  >#CFDFF2</Color>
    <Color x:Key="Primary3"            >#B5AFB2</Color>
    <Color x:Key="Primary3Light"       >#D0CECE</Color>
    <Color x:Key="Primary3LightLight"  >#E7E6E6</Color>
    <Color x:Key="Secondary1"          >#F38E20</Color>
    <Color x:Key="Secondary1Light"     >#F8BB79</Color>
    <Color x:Key="Secondary1LightLight">#FBD8B1</Color>
    <Color x:Key="Secondary2"          >#00B798</Color>
    <Color x:Key="Secondary2Light"     >#85DBCB</Color>
    <Color x:Key="Secondary2LightLight">#B5E9E0</Color>
    <Color x:Key="Secondary3"          >#993366</Color>
    <Color x:Key="Secondary3Light"     >#CC98B3</Color>
    <Color x:Key="Secondary3LightLight">#E1C1D1</Color>

    <!--  BRUSHES  -->
    <SolidColorBrush x:Key="Primary1Brush"             Color="{StaticResource Primary1}" />
    <SolidColorBrush x:Key="Primary1BrushLight"        Color="{StaticResource Primary1Light}" />
    <SolidColorBrush x:Key="Primary1BrushLightLight"   Color="{StaticResource Primary1LightLight}" />
    <SolidColorBrush x:Key="Primary2Brush"             Color="{StaticResource Primary2}" />
    <SolidColorBrush x:Key="Primary2BrushLight"        Color="{StaticResource Primary2Light}" />
    <SolidColorBrush x:Key="Primary2BrushLightLight"   Color="{StaticResource Primary2LightLight}" />
    <SolidColorBrush x:Key="Primary3Brush"             Color="{StaticResource Primary3}" />
    <SolidColorBrush x:Key="Primary3BrushLight"        Color="{StaticResource Primary3Light}" />
    <SolidColorBrush x:Key="Primary3BrushLightLight"   Color="{StaticResource Primary3LightLight}" />
    <SolidColorBrush x:Key="Secondary1Brush"           Color="{StaticResource Secondary1}" />
    <SolidColorBrush x:Key="Secondary1BrushLight"      Color="{StaticResource Secondary1Light}" />
    <SolidColorBrush x:Key="Secondary1BrushLightLight" Color="{StaticResource Secondary1LightLight}" />
    <SolidColorBrush x:Key="Secondary2Brush"           Color="{StaticResource Secondary2}" />
    <SolidColorBrush x:Key="Secondary2BrushLight"      Color="{StaticResource Secondary2Light}" />
    <SolidColorBrush x:Key="Secondary2BrushLightLight" Color="{StaticResource Secondary2LightLight}" />
    <SolidColorBrush x:Key="Secondary3Brush"           Color="{StaticResource Secondary3}" />
    <SolidColorBrush x:Key="Secondary3BrushLight"      Color="{StaticResource Secondary3Light}" />
    <SolidColorBrush x:Key="Secondary3BrushLightLight" Color="{StaticResource Secondary3LightLight}" />

    <!--  STYLES  -->
    <Style TargetType="CheckBox" x:Key="DefaultCheckBox">
        <Setter Property="VerticalAlignment"        Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style TargetType="ComboBox" x:Key="DefaultComboBox">
        <Setter Property="VerticalAlignment"        Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style TargetType="RadioButton" x:Key="DefaultRadioButton">
        <Setter Property="VerticalAlignment"        Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style TargetType="TextBox" x:Key="LabelTextBox">
        <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalAlignment"           Value="Center" />
        <Setter Property="TextWrapping"                Value="Wrap" />
        <Setter Property="IsReadOnly"                  Value="True" />
        <Setter Property="Background"                  Value="Transparent" />
        <Setter Property="BorderThickness"             Value="0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Arrow" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="TextBlock" x:Key="DefaultTextBlock">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment"   Value="Center" />
        <Setter Property="TextAlignment"       Value="Right" />
        <Setter Property="Padding"             Value="5" />
        <Setter Property="FontWeight"          Value="SemiBold" />
    </Style>
    <Style TargetType="TextBlock" x:Key="WrapTextBlock">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Padding"      Value="3 1" />
    </Style>
    <Style TargetType="TextBlock" x:Key="CenterTextBlock">
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Padding"       Value="3 1" />
    </Style>
    <Style TargetType="TextBlock" x:Key="TabItemTextBlock">
        <Setter Property="Foreground"                     Value="DarkGray" />
        <Setter Property="HorizontalAlignment"            Value="Center" />
        <Setter Property="VerticalAlignment"              Value="Center" />
        <Setter Property="FocusVisualStyle"               Value="{x:Null}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Margin"                         Value="10 0 10 10" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabItem}}" Value="True">
                <Setter Property="Control.Foreground" Value="Black" />
                <Setter Property="Control.FontSize"   Value="20" />
                <Setter Property="Control.FontWeight" Value="SemiBold" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabItem}}" Value="True">
                <Setter Property="Control.Foreground" Value="Black" />
                <Setter Property="Control.FontSize"   Value="20" />
                <Setter Property="Control.FontWeight" Value="SemiBold" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Border" x:Key="DefaultBorder">
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius"    Value="5" />
    </Style>
    <Style TargetType="Border" x:Key="Primary1Border" BasedOn="{StaticResource DefaultBorder}">
        <Setter Property="Background"      Value="{StaticResource Primary1BrushLightLight}" />
        <Setter Property="BorderBrush"     Value="{StaticResource Primary1Brush}" />
    </Style>
    <Style TargetType="Border" x:Key="Primary2Border" BasedOn="{StaticResource DefaultBorder}">
        <Setter Property="Background"      Value="{StaticResource Primary2BrushLightLight}" />
        <Setter Property="BorderBrush"     Value="{StaticResource Primary2Brush}" />
    </Style>
    <Style TargetType="Border" x:Key="Primary3Border" BasedOn="{StaticResource DefaultBorder}">
        <Setter Property="Background"      Value="{StaticResource Primary3BrushLightLight}" />
        <Setter Property="BorderBrush"     Value="{StaticResource Primary3Brush}" />
    </Style>
    <Style TargetType="Border" x:Key="Secondary1Border" BasedOn="{StaticResource DefaultBorder}">
        <Setter Property="Background"      Value="{StaticResource Secondary1BrushLightLight}" />
        <Setter Property="BorderBrush"     Value="{StaticResource Secondary1Brush}" />
    </Style>
    <Style TargetType="Border" x:Key="Secondary2Border" BasedOn="{StaticResource DefaultBorder}">
        <Setter Property="Background"      Value="{StaticResource Secondary2BrushLightLight}" />
        <Setter Property="BorderBrush"     Value="{StaticResource Secondary2Brush}" />
    </Style>
    <Style TargetType="Border" x:Key="Secondary3Border" BasedOn="{StaticResource DefaultBorder}">
        <Setter Property="Background"      Value="{StaticResource Secondary3BrushLightLight}" />
        <Setter Property="BorderBrush"     Value="{StaticResource Secondary3Brush}" />
    </Style>
    <Style TargetType="Button" x:Key="RoundedButton">
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5" />
            </Style>
        </Style.Resources>
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style TargetType="Button" x:Key="TabItemButton" BasedOn="{StaticResource RoundedButton}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabItem}}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabItem}}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ToggleButton" x:Key="DefaultToggleButton">
        <Setter Property="FontFamily"                     Value="Segoe UI" />
        <Setter Property="FontSize"                       Value="13" />
        <Setter Property="Height"                         Value="Auto" />
        <Setter Property="Width"                          Value="Auto" />
        <Setter Property="Foreground"                     Value="DarkGray" />
        <Setter Property="HorizontalAlignment"            Value="Center" />
        <Setter Property="VerticalAlignment"              Value="Center" />
        <Setter Property="HorizontalContentAlignment"     Value="Center" />
        <Setter Property="VerticalContentAlignment"       Value="Center" />
        <Setter Property="FocusVisualStyle"               Value="{x:Null}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Margin"                         Value="10 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <TextBlock Text="{TemplateBinding Content}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                                        <Setter Property="Control.Foreground" Value="Black" />
                                        <Setter Property="Control.FontSize"   Value="20" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                                        <Setter Property="Control.Foreground" Value="Black" />
                                        <Setter Property="Control.FontSize"   Value="20" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TabItem" x:Key="DefaultTabItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <TextBlock Text="{TemplateBinding Header}" Style="{StaticResource TabItemTextBlock}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="DataGridCell" x:Key="DefaultDataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="DataGridCell" x:Key="CategoricalDataGridCell" BasedOn="{StaticResource DefaultDataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="Foreground" Value="{Binding Path=Category, Converter={StaticResource CategoryToBrush}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="DataGridCell" x:Key="CheckBoxDataGridCell" BasedOn="{StaticResource DefaultDataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsEditing" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="DataGridRow" x:Key="HoverHighlightDataGridRow">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gainsboro" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="DataGrid" x:Key="DefaultDataGrid">
        <Style.Resources>
            <SolidColorBrush 
                x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" 
                Color="{x:Static SystemColors.HighlightColor}" />
        </Style.Resources>
        <Setter Property="AutoGenerateColumns"           Value="False" />
        <Setter Property="CanUserAddRows"                Value="False" />
        <Setter Property="CanUserDeleteRows"             Value="False" />
        <Setter Property="CanUserReorderColumns"         Value="True" />
        <Setter Property="CanUserResizeColumns"          Value="True" />
        <Setter Property="CanUserSortColumns"            Value="True" />
        <Setter Property="HeadersVisibility"             Value="Column" />
        <Setter Property="SelectionMode"                 Value="Single" />
        <Setter Property="SelectionUnit"                 Value="FullRow" />
        <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
        <Setter Property="IsReadOnly"                    Value="True" />
        <Setter Property="RowStyle"                      Value="{StaticResource HoverHighlightDataGridRow}" />
        <Setter Property="CellStyle"                     Value="{StaticResource DefaultDataGridCell}"/>
    </Style>
    <Style TargetType="DataGrid" x:Key="CategorialDataGrid" BasedOn="{StaticResource DefaultDataGrid}">
        <Setter Property="CellStyle" Value="{StaticResource CategoricalDataGridCell}" />
    </Style>

</ResourceDictionary>
